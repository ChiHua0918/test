name: CI_CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  try:
    # runs-on: [self-hosted, linux]
    runs-on: ubuntu-latest
    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - name: Checks-out your repository under $GITHUB_WORKSPAC
          uses: actions/checkout@v3

        # Runs a single command using the runners shell
        - name: Run a script
          run: ls

        # Runs a set of commands using the runners shell
        - name: Run a multi-line script
          run: |
            echo Simple test,
            echo it is well done.
  # 在 docker 中建立一個 runner
  build:
    # runs-on: [self-hosted, linux]
    runs-on: ubuntu-latest
    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - name: Checks-out your repository under $GITHUB_WORKSPAC
          uses: actions/checkout@v3

        # - name: Login to GitHub Container Registry
        #   uses: docker/login-action@v2
        #   with:
        #     registry: ghcr.io
        #     username: ${{ github.actor }}
        #     password: ${{ secrets.GITHUB_TOKEN }}
            
        - name: install package
          run: pip install -r ./flask/requirements.txt

        - name: build docker
          env:
            imageName: ${{secrets.DOCKERHUB_USERNAME}}/aa
          run: docker build -t $imageName .

        - name: see all the images
          run: docker images
        
        # - name: login in docker hub
        #   # uses: docker/login-action@v2
        #   env:
        #     username: ${{ secrets.DOCKERHUB_USERNAME }}
        #     password: ${{ secrets.DOCKERHUB_PASSWORD }}
        #   run: |
        #     docker login -u $username -p $password

        # - name: docker push
        #   env:
        #     imageName: ${{secrets.DOCKERHUB_USERNAME}}/flask
        #   run: docker push $imageName
  test:
    # runs-on: [self-hosted, linux]
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: unit test
        run: python3 test.py
  deploy:
    needs: test
    # runs-on: [self-hosted, linux]
    runs-on: ubuntu-latest
    steps:
      - name: create a docker-compose.yml
        run: touch docker-compose.yml
      
      - name: write content
        env:
          imageName: ${{secrets.DOCKERHUB_USERNAME}}/aa
        run: |
              imageName=$imageName
              echo -e "version: '3'\nservices:\n  app:\n    image: $imageName\n    ports:\n      - '8080:8080'" > docker-compose.yml

      - name: view
        run: cat docker-compose.yml
      # - name: run the docker image
      #   run: docker-compose up